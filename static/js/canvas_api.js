/* DO NOT EDIT THIS FILE BY HAND. It is generated by canvas/js_api.py
/*
 * Canvas Ajax API
 *
 * Returns a $.Deferred promise instance.
 *
 * Any doneCallbacks will receive two params: `data`, `jq_xhr` (from $.ajax's success callback).
 *
 * failCallbacks receive two params: `data`, `jq_xhr`. `data` will be a JSON hash, even if it was an HTTP error,
 * in which case the `reason` parameter will be the HTTP error message (`textStatus` from $.ajax's `error` callback.
 * If it's a service-level error (our Canvas API returns success: false), then it will be the JSON given in that
 * response, which includes a `reason` item.
 *
 * See:
 *     http://api.jquery.com/category/deferred-object/
 *     http://api.jquery.com/jQuery.ajax/
 */
canvas.api = {
    _fail: function (_, resp) {
        if (this.stop_propagation) {
            return;
        }
        canvas.on_api_fail(this.data, resp);
    },

    
    /**
     * Acknowledge and dismiss an in-site notification.
     * 
     * `nkey`:
     *     Key of notification.
     */
    acknowledge_notification: function(nkey) {
        var params = {};
        var args = arguments;
        $.each(["nkey"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/notification/acknowledge', true, this.data);
    },

    /**
     * 
     */
    activity_stream: function(optional_params) {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/activity/activity_stream', true, this.data);
    },

    /**
     * 
     */
    activity_stream_items: function() {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/activity/activities', true, this.data);
    },

    /**
     * Stickers a comment. You can be logged in or out. 
     */
    add_sticker_to_comment: function(comment_id, type_id, optional_params) {
        var params = {};
        var args = arguments;
        $.each(["comment_id", "type_id"], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/sticker/comment', true, this.data);
    },

    /**
     * Returns all completed mobile monsters for ones the logged-in user began. 
     */
    all_completed_mobile_monsters: function() {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/monster/all_completed_mobile_monsters', true, this.data);
    },

    /**
     * 
     */
    all_mobile_monster_completion_invites: function() {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/invite_remixer/all_mobile_monster_completion_invites', true, this.data);
    },

    /**
     * 
     */
    can_sticker_comment: function(comment_id, type_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id", "type_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/sticker/comment/validate', true, this.data);
    },

    /**
     * 
     */
    claim_comment: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment/claim', true, this.data);
    },

    /**
     * 
     */
    combine_upload_chunks: function(chunks, metadata, optional_params) {
        var params = {};
        var args = arguments;
        $.each(["chunks", "metadata"], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/chunk/combine', true, this.data);
    },

    /**
     * 
     */
    delete_comment: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment/delete', true, this.data);
    },

    /**
     * 
     */
    downvote_comment: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment/downvote_action', true, this.data);
    },

    /**
     * 
     */
    edit_group: function(group_name, optional_params) {
        var params = {};
        var args = arguments;
        $.each(["group_name"], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/group/edit', true, this.data);
    },

    /**
     * 
     */
    facebook_exists: function(facebook_id) {
        var params = {};
        var args = arguments;
        $.each(["facebook_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/user/facebook_exists', true, this.data);
    },

    /**
     * 
     */
    feed_items: function(earliest_timestamp_cutoff) {
        var params = {};
        var args = arguments;
        $.each(["earliest_timestamp_cutoff"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/feed/items', true, this.data);
    },

    /**
     * 
     */
    flag_comment: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment/flag', true, this.data);
    },

    /**
     * 
     */
    follow_group: function(category_id) {
        var params = {};
        var args = arguments;
        $.each(["category_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/group/follow', true, this.data);
    },

    /**
     * 
     */
    follow_tag: function(tag) {
        var params = {};
        var args = arguments;
        $.each(["tag"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/tags/follow_tag', true, this.data);
    },

    /**
     * 
     */
    follow_thread: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/following/follow_thread', true, this.data);
    },

    /**
     * 
     */
    follow_user: function(user_id) {
        var params = {};
        var args = arguments;
        $.each(["user_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/following/follow_user', true, this.data);
    },

    /**
     * 
     */
    front_more: function(optional_params) {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/front/more', true, this.data);
    },

    /**
     * Grabs an entity from Redis given a key.
     */
    get_redis: function(key) {
        var params = {};
        var args = arguments;
        $.each(["key"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/staff/redis', true, this.data);
    },

    /**
     * 
     */
    get_replies: function(optional_params) {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/comment/replies', true, this.data);
    },

    /**
     * Returns whether or not a user has stickered a post.
     */
    get_user_sticker: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment/get_user_sticker', true, this.data);
    },

    /**
     * Returns None if the group name is valid and does not exist. 
     */
    group_exists: function(name) {
        var params = {};
        var args = arguments;
        $.each(["name"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/group/exists', true, this.data);
    },

    /**
     * 
     */
    hide_comment: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment_hiding/hide_comment', true, this.data);
    },

    /**
     * 
     */
    hide_suggested_tag: function(tag) {
        var params = {};
        var args = arguments;
        $.each(["tag"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/suggest/hide_suggested_tag', true, this.data);
    },

    /**
     * 
     */
    hide_suggested_user: function(user_id) {
        var params = {};
        var args = arguments;
        $.each(["user_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/suggest/hide_suggested_user', true, this.data);
    },

    /**
     * `comment_id` may be the thread OP or any reply in it.
     * 
     * Also downvotes.
     */
    hide_thread: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment_hiding/hide_thread', true, this.data);
    },

    /**
     * 
     */
    invite_canvas_user_to_complete_monster: function(username, comment_id) {
        var params = {};
        var args = arguments;
        $.each(["username", "comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/invite_remixer/invite_canvas_user_to_complete_monster', true, this.data);
    },

    /**
     * 
     */
    invite_canvas_user_to_remix: function(username, comment_id) {
        var params = {};
        var args = arguments;
        $.each(["username", "comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/invite_remixer/invite_canvas_user_to_remix', true, this.data);
    },

    /**
     * 
     */
    invite_url: function(optional_params) {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/invite_remixer/invite_url', false, this.data);
    },

    /**
     * 
     */
    invite_user: function(username, payload) {
        var params = {};
        var args = arguments;
        $.each(["username", "payload"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/monster/invite_user', true, this.data);
    },

    /**
     * 
     */
    mark_activity_read: function(activity_id) {
        var params = {};
        var args = arguments;
        $.each(["activity_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/activity/mark_activity_read', true, this.data);
    },

    /**
     * 
     */
    mark_all_activities_read: function() {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/activity/mark_all_activities_read', true, this.data);
    },

    /**
     * 
     */
    mark_offtopic_comment: function(comment_id, optional_params) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/comment/mark_offtopic', true, this.data);
    },

    /**
     * 
     */
    metric_record: function(name, optional_params) {
        var params = {};
        var args = arguments;
        $.each(["name"], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/metric/record', true, this.data);
    },

    /**
     * 
     */
    moderate_comment: function(comment_id, visibility, optional_params) {
        var params = {};
        var args = arguments;
        $.each(["comment_id", "visibility"], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/comment/moderate', true, this.data);
    },

    /**
     * Mutes the op of a given comment, so that the user never receives any notifications pertaining to that thread.
     */
    mute_thread: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment/mute', true, this.data);
    },

    /**
     * 
     */
    new_group: function(group_name, group_description) {
        var params = {};
        var args = arguments;
        $.each(["group_name", "group_description"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/group/new', true, this.data);
    },

    /**
     * Pin the thread this comment is a part of. 
     */
    pin_comment: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment/pin', true, this.data);
    },

    /**
     * 
     */
    post_comment: function(optional_params) {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/comment/post', true, this.data);
    },

    /**
     * 
     */
    record_fact: function(type, optional_params) {
        var params = {};
        var args = arguments;
        $.each(["type"], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/fact/record', true, this.data);
    },

    /**
     * 
     */
    register_token: function(device_token) {
        var params = {};
        var args = arguments;
        $.each(["device_token"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/monster/register_token', true, this.data);
    },

    /**
     * 
     */
    render_sticky_thread_preview: function(short_id) {
        var params = {};
        var args = arguments;
        $.each(["short_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/sticky_threads/render_sticky_thread_preview', true, this.data);
    },

    /**
     * 
     */
    render_thread_preview: function(short_id) {
        var params = {};
        var args = arguments;
        $.each(["short_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/logged_out_homepage/render_thread_preview', true, this.data);
    },

    /**
     * 
     */
    script_getsum: function(short_id) {
        var params = {};
        var args = arguments;
        $.each(["short_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/script/getsum', true, this.data);
    },

    /**
     * 
     */
    script_share: function(s3sum) {
        var params = {};
        var args = arguments;
        $.each(["s3sum"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/script/share', true, this.data);
    },

    /**
     * Searches the special "stamps" group for stamps that match the search query.
     * 
     * Returns {comments: [list of comment details]}
     */
    search_stamps: function(query, start) {
        var params = {};
        var args = arguments;
        $.each(["query", "start"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/stamps/search', true, this.data);
    },

    /**
     * 
     */
    send_notification_email: function(action, username) {
        var params = {};
        var args = arguments;
        $.each(["action", "username"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/staff/send_notification_email', true, this.data);
    },

    /**
     * Logs an exception in Sentry. POST the following JSON structure:
     *     {
     *         "url": "http://example.com/foo/bar",
     *         "stackInfo": stack // a JSONified "stack info" object that TraceKit provides.
     *     }
     * (See: https://github.com/csnover/TraceKit)
     * 
     * For now we just log the JSON string. In the future we could format it into something Sentry understands better.
     */
    sentry_js_exception: function(stackInfo, url) {
        var params = {};
        var args = arguments;
        $.each(["stackInfo", "url"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/sentry/js_exception', true, this.data);
    },

    /**
     * 
     */
    set_facebook: function(facebook_id) {
        var params = {};
        var args = arguments;
        $.each(["facebook_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/user/set_facebook', true, this.data);
    },

    /**
     * 
     */
    share_create: function(url, channel) {
        var params = {};
        var args = arguments;
        $.each(["url", "channel"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/share/create', true, this.data);
    },

    /**
     * 
     */
    share_remix: function(post, access_token) {
        var params = {};
        var args = arguments;
        $.each(["post", "access_token"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/facebook/remix', true, this.data);
    },

    /**
     * 
     */
    share_sticker: function(post, access_token) {
        var params = {};
        var args = arguments;
        $.each(["post", "access_token"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/facebook/sticker', true, this.data);
    },

    /**
     * 
     */
    staff_pick_stamps: function(page) {
        var params = {};
        var args = arguments;
        $.each(["page"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/stamps/staff_picks', true, this.data);
    },

    /**
     * 
     */
    sticky_comment: function(comment_id, text) {
        var params = {};
        var args = arguments;
        $.each(["comment_id", "text"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/sticky_threads/sticky_comment', true, this.data);
    },

    /**
     * 
     */
    store_buy: function(item_type, item_id, optional_params) {
        var params = {};
        var args = arguments;
        $.each(["item_type", "item_id"], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/store/buy', true, this.data);
    },

    /**
     * Used by canvas.test.test_bgwork. Writes a file we can check for. 
     */
    test_bgwork: function() {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/testing/test_bgwork', true, this.data);
    },

    /**
     * 
     */
    thread_comment_details: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/threads/thread_comment_details', true, this.data);
    },

    /**
     * 
     */
    toggle_sharing: function() {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/facebook/toggle_sharing', true, this.data);
    },

    /**
     * 
     */
    unflag_comment: function(flag_id) {
        var params = {};
        var args = arguments;
        $.each(["flag_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment/unflag', true, this.data);
    },

    /**
     * 
     */
    unfollow_group: function(category_id) {
        var params = {};
        var args = arguments;
        $.each(["category_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/group/unfollow', true, this.data);
    },

    /**
     * 
     */
    unfollow_tag: function(tag) {
        var params = {};
        var args = arguments;
        $.each(["tag"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/tags/unfollow_tag', true, this.data);
    },

    /**
     * 
     */
    unfollow_thread: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/following/unfollow_thread', true, this.data);
    },

    /**
     * 
     */
    unfollow_user: function(user_id) {
        var params = {};
        var args = arguments;
        $.each(["user_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/following/unfollow_user', true, this.data);
    },

    /**
     * 
     */
    unpin_comment: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/comment/unpin', true, this.data);
    },

    /**
     * 
     */
    update_comment_tags: function(comment_id, tags) {
        var params = {};
        var args = arguments;
        $.each(["comment_id", "tags"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/tags/update_comment_tags', true, this.data);
    },

    /**
     * 
     */
    upload_chunk: function(data) {
        var params = {};
        var args = arguments;
        $.each(["data"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/chunk/upload', true, this.data);
    },

    /**
     * Returns true or false, doesn't validate the username. 
     */
    user_actually_exists: function(username) {
        var params = {};
        var args = arguments;
        $.each(["username"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/user/actually_exists', true, this.data);
    },

    /**
     * 
     */
    user_check_password: function(username, password) {
        var params = {};
        var args = arguments;
        $.each(["username", "password"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/user/check_password', true, this.data);
    },

    /**
     * Returns None if the username is valid and does not exist. 
     */
    user_exists: function(username) {
        var params = {};
        var args = arguments;
        $.each(["username"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/user/exists', true, this.data);
    },

    /**
     * 
     */
    user_info_for_drawquest_migration: function(username) {
        var params = {};
        var args = arguments;
        $.each(["username"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/user/info_for_drawquest_migration', true, this.data);
    },

    /**
     * 
     */
    user_level_up: function() {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/user/level_up', true, this.data);
    },

    /**
     * Fetches more posts for infinite scroll on the user page. 
     */
    user_more: function(optional_params) {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/user/more', true, this.data);
    },

    /**
     * 
     */
    user_set_profile: function(comment_id) {
        var params = {};
        var args = arguments;
        $.each(["comment_id"], function(i, v) {
            params[v] = args[i];
        });
        
        this.data = params;
        return this._call('/api/user/set_profile', true, this.data);
    },

    /**
     * Return {"success": True} if valid. 
     */
    validate_comment: function(optional_params) {
        var params = {};
        var args = arguments;
        $.each([], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/comment/validate_post', true, this.data);
    },

    /**
     * 
     */
    view_thread_more: function(ids, optional_params) {
        var params = {};
        var args = arguments;
        $.each(["ids"], function(i, v) {
            params[v] = args[i];
        });
        
        if (typeof optional_params !== 'undefined') {
            $.extend(params, optional_params);
        }
        this.data = params;
        return this._call('/api/view_thread/more', true, this.data);
    },

    _response_type: function (jq_xhr) {
        // Can detect text/html or application/json. If unknown, returns null. If known, returns the type name.
        var content_type = jq_xhr.getResponseHeader('Content-Type');
        var match = null;
        $(['text/html', 'application/json']).each(function (i, candidate) {
            if (content_type.indexOf(candidate) !== -1) {
                match = candidate;
            }
        });
        return match;
    },

    _call: function (url, async, params) {
        var def = new $.Deferred();
        var that = this;
        $.ajax({
            url: url,
            type: 'POST',
            async: async,
            contentType: 'application/json',
            data: JSON.stringify(params),
            success: function(data, text_status, jq_xhr) {
                var content_type = that._response_type(jq_xhr);
                if (content_type === 'text/html') {
                    def.resolve(data, jq_xhr);
                } else {
                    if (data.success) {
                        def.resolve(data, jq_xhr);
                    } else {
                        def.reject(data, jq_xhr);
                        def.fail(that._fail);
                    }
                }
            },
            error: function(jq_xhr) {
                def.reject({'success': false, 'reason': jq_xhr.status}, jq_xhr);
                def.fail(that._fail);
            }
        });
        return def.promise();
    }
};
